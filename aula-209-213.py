# M√©todos de classe + factories (f√°bricas)
# S√£o m√©todos onde "self" ser√° "cls", ou seja,
# ao inv√©s de receber a inst√¢ncia no primeiro
# par√¢metro, receberemos a pr√≥pria classe.

# @staticmethod (m√©todos est√°ticos) s√£o in√∫teis em Python =)
# M√©todos est√°ticos s√£o m√©todos que est√£o dentro da
# classe, mas n√£o tem acesso ao self nem ao cls.
# Em resumo, s√£o fun√ß√µes que existem dentro da sua
# classe.

# @staticmethod (m√©todos est√°ticos) s√£o in√∫teis em Python =)
# M√©todos est√°ticos s√£o m√©todos que est√£o dentro da
# classe, mas n√£o tem acesso ao self nem ao cls.
# Em resumo, s√£o fun√ß√µes que existem dentro da sua
# classe.

# method vs @classmethod vs @staticmethod
# method - self, m√©todo de inst√¢ncia
# @classmethod - cls, m√©todo de classe
# @staticmethod - m√©todo est√°tico (‚ùåself, ‚ùåcls)

# @property - um getter no modo Pyth√¥nico
# getter - um m√©todo para obter um atributo
# cor -> get_cor()
# modo pyth√¥nico - modo do Python de fazer coisas
# @property √© uma propriedade do objeto, ela
# √© um m√©todo que se comporta como um
# atributo ü§Ø ü§Ø ü§Ø
# Geralmente √© usada nas seguintes situa√ß√µes:
# - como getter
# - p/ evitar quebrar c√≥digo cliente
# - p/ habilitar setter
# - p/ executar a√ß√µes ao obter um atributo
# C√≥digo cliente - √© o c√≥digo que usa seu c√≥digo

# @property + @setter - getter e setter no modo Pyth√¥nico
# - como getter
# - p/ evitar quebrar c√≥digo cliente
# - p/ habilitar setter
# - p/ executar a√ß√µes ao obter um atributo
# Atributos que come√ßar com um ou dois underlines
# n√£o devem ser usados fora da classe.

class DoAnyThing:
    def __init__( self, a = 0, b = 0 ):
        self._a = a
        self._b = b

    @classmethod
    def Create( cls, a, b, / ):
        return cls( a, b )

    @staticmethod
    def Init( a = 0, b = 0  ):
        return DoAnyThing( a, b )

    def print( self ):
        print( f'{ self.a= } and { self.b= }' )

    @property
    def a( self ):
        return self._a

    @property
    def b( self ):
        return self._b

    @a.setter
    def a( self, a ):
        self._a = a

    @b.setter
    def b( self, b ):
        self._b = b

################################################
a1 = DoAnyThing()
a2 = DoAnyThing.Create( 10, 20 )
a3 = DoAnyThing.Init()
a4 = DoAnyThing.Init( 15, 30 )


a1.print()
a2.print()
a3.print()
a4.print()

a1.a = 1
a1.b = 2
print( a1.a, a1.b )
